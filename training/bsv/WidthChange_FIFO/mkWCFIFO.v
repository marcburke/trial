//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Tue Nov  3 12:59:15 EST 2015
//
//
// Ports:
// Name                         I/O  size props
// RDY_portA_request_put          O     1
// portA_response_get             O    32
// RDY_portA_response_get         O     1
// RDY_portB_request_put          O     1
// portB_response_get             O    32
// RDY_portB_response_get         O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// portA_request_put              I    52
// portB_request_put              I    52
// EN_portA_request_put           I     1
// EN_portB_request_put           I     1
// EN_portAClear                  I     1
// EN_portBClear                  I     1
// EN_portA_response_get          I     1
// EN_portB_response_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkWCFIFO(CLK,
		RST_N,

		portA_request_put,
		EN_portA_request_put,
		RDY_portA_request_put,

		EN_portA_response_get,
		portA_response_get,
		RDY_portA_response_get,

		portB_request_put,
		EN_portB_request_put,
		RDY_portB_request_put,

		EN_portB_response_get,
		portB_response_get,
		RDY_portB_response_get,

		EN_portAClear,

		EN_portBClear);
  input  CLK;
  input  RST_N;

  // action method portA_request_put
  input  [51 : 0] portA_request_put;
  input  EN_portA_request_put;
  output RDY_portA_request_put;

  // actionvalue method portA_response_get
  input  EN_portA_response_get;
  output [31 : 0] portA_response_get;
  output RDY_portA_response_get;

  // action method portB_request_put
  input  [51 : 0] portB_request_put;
  input  EN_portB_request_put;
  output RDY_portB_request_put;

  // actionvalue method portB_response_get
  input  EN_portB_response_get;
  output [31 : 0] portB_response_get;
  output RDY_portB_response_get;

  // action method portAClear
  input  EN_portAClear;

  // action method portBClear
  input  EN_portBClear;

  // signals for module outputs
  wire [31 : 0] portA_response_get, portB_response_get;
  wire RDY_portA_request_put,
       RDY_portA_response_get,
       RDY_portB_request_put,
       RDY_portB_response_get;

  // inlined wires
  wire [1 : 0] wc_fifos_serverAdapterA_s1_1$wget,
	       wc_fifos_serverAdapterB_s1_1$wget;
  wire wc_fifos_serverAdapterA_cnt_1$whas,
       wc_fifos_serverAdapterA_outData_enqData$whas,
       wc_fifos_serverAdapterA_outData_outData$whas,
       wc_fifos_serverAdapterA_s1_1$whas,
       wc_fifos_serverAdapterB_cnt_1$whas,
       wc_fifos_serverAdapterB_outData_enqData$whas,
       wc_fifos_serverAdapterB_outData_outData$whas,
       wc_fifos_serverAdapterB_s1_1$whas;

  // register wc_fifos_serverAdapterA_cnt
  reg [2 : 0] wc_fifos_serverAdapterA_cnt;
  wire [2 : 0] wc_fifos_serverAdapterA_cnt$D_IN;
  wire wc_fifos_serverAdapterA_cnt$EN;

  // register wc_fifos_serverAdapterA_s1
  reg [1 : 0] wc_fifos_serverAdapterA_s1;
  wire [1 : 0] wc_fifos_serverAdapterA_s1$D_IN;
  wire wc_fifos_serverAdapterA_s1$EN;

  // register wc_fifos_serverAdapterB_cnt
  reg [2 : 0] wc_fifos_serverAdapterB_cnt;
  wire [2 : 0] wc_fifos_serverAdapterB_cnt$D_IN;
  wire wc_fifos_serverAdapterB_cnt$EN;

  // register wc_fifos_serverAdapterB_s1
  reg [1 : 0] wc_fifos_serverAdapterB_s1;
  wire [1 : 0] wc_fifos_serverAdapterB_s1$D_IN;
  wire wc_fifos_serverAdapterB_s1$EN;

  // ports of submodule wc_fifos_memory
  wire [31 : 0] wc_fifos_memory$DIA,
		wc_fifos_memory$DIB,
		wc_fifos_memory$DOA,
		wc_fifos_memory$DOB;
  wire [17 : 0] wc_fifos_memory$ADDRA, wc_fifos_memory$ADDRB;
  wire wc_fifos_memory$ENA,
       wc_fifos_memory$ENB,
       wc_fifos_memory$WEA,
       wc_fifos_memory$WEB;

  // ports of submodule wc_fifos_serverAdapterA_outDataCore
  wire [31 : 0] wc_fifos_serverAdapterA_outDataCore$D_IN,
		wc_fifos_serverAdapterA_outDataCore$D_OUT;
  wire wc_fifos_serverAdapterA_outDataCore$CLR,
       wc_fifos_serverAdapterA_outDataCore$DEQ,
       wc_fifos_serverAdapterA_outDataCore$EMPTY_N,
       wc_fifos_serverAdapterA_outDataCore$ENQ,
       wc_fifos_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule wc_fifos_serverAdapterB_outDataCore
  wire [31 : 0] wc_fifos_serverAdapterB_outDataCore$D_IN,
		wc_fifos_serverAdapterB_outDataCore$D_OUT;
  wire wc_fifos_serverAdapterB_outDataCore$CLR,
       wc_fifos_serverAdapterB_outDataCore$DEQ,
       wc_fifos_serverAdapterB_outDataCore$EMPTY_N,
       wc_fifos_serverAdapterB_outDataCore$ENQ,
       wc_fifos_serverAdapterB_outDataCore$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_wc_fifos_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_wc_fifos_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_wc_fifos_serverAdapterA_overRun,
       CAN_FIRE_RL_wc_fifos_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_wc_fifos_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_wc_fifos_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_wc_fifos_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_wc_fifos_serverAdapterB_overRun,
       CAN_FIRE_RL_wc_fifos_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_wc_fifos_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_portAClear,
       CAN_FIRE_portA_request_put,
       CAN_FIRE_portA_response_get,
       CAN_FIRE_portBClear,
       CAN_FIRE_portB_request_put,
       CAN_FIRE_portB_response_get,
       WILL_FIRE_RL_wc_fifos_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_wc_fifos_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_wc_fifos_serverAdapterA_overRun,
       WILL_FIRE_RL_wc_fifos_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_wc_fifos_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_wc_fifos_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_wc_fifos_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_wc_fifos_serverAdapterB_overRun,
       WILL_FIRE_RL_wc_fifos_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_wc_fifos_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_portAClear,
       WILL_FIRE_portA_request_put,
       WILL_FIRE_portA_response_get,
       WILL_FIRE_portBClear,
       WILL_FIRE_portB_request_put,
       WILL_FIRE_portB_response_get;

  // inputs to muxes for submodule ports
  wire [1 : 0] MUX_wc_fifos_serverAdapterA_s1_1$wset_1__VAL_2,
	       MUX_wc_fifos_serverAdapterB_s1_1$wset_1__VAL_2;

  // remaining internal signals
  wire [2 : 0] wc_fifos_serverAdapterA_cnt_6_PLUS_IF_wc_fifos_ETC___d32,
	       wc_fifos_serverAdapterB_cnt_3_PLUS_IF_wc_fifos_ETC___d89;
  wire [1 : 0] portA_request_put_BITS_51_TO_50__q1,
	       portB_request_put_BITS_51_TO_50__q2;

  // action method portA_request_put
  assign RDY_portA_request_put = (wc_fifos_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign CAN_FIRE_portA_request_put =
	     (wc_fifos_serverAdapterA_cnt ^ 3'h4) < 3'd7 ;
  assign WILL_FIRE_portA_request_put = EN_portA_request_put ;

  // actionvalue method portA_response_get
  assign portA_response_get =
	     WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_setFirstEnq ?
	       wc_fifos_memory$DOA :
	       wc_fifos_serverAdapterA_outDataCore$D_OUT ;
  assign RDY_portA_response_get =
	     (wc_fifos_serverAdapterA_outDataCore$EMPTY_N ||
	      wc_fifos_serverAdapterA_outData_enqData$whas) &&
	     wc_fifos_serverAdapterA_outData_outData$whas ;
  assign CAN_FIRE_portA_response_get =
	     (wc_fifos_serverAdapterA_outDataCore$EMPTY_N ||
	      wc_fifos_serverAdapterA_outData_enqData$whas) &&
	     wc_fifos_serverAdapterA_outData_outData$whas ;
  assign WILL_FIRE_portA_response_get = EN_portA_response_get ;

  // action method portB_request_put
  assign RDY_portB_request_put = (wc_fifos_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign CAN_FIRE_portB_request_put =
	     (wc_fifos_serverAdapterB_cnt ^ 3'h4) < 3'd7 ;
  assign WILL_FIRE_portB_request_put = EN_portB_request_put ;

  // actionvalue method portB_response_get
  assign portB_response_get =
	     WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_setFirstEnq ?
	       wc_fifos_memory$DOB :
	       wc_fifos_serverAdapterB_outDataCore$D_OUT ;
  assign RDY_portB_response_get =
	     (wc_fifos_serverAdapterB_outDataCore$EMPTY_N ||
	      wc_fifos_serverAdapterB_outData_enqData$whas) &&
	     wc_fifos_serverAdapterB_outData_outData$whas ;
  assign CAN_FIRE_portB_response_get =
	     (wc_fifos_serverAdapterB_outDataCore$EMPTY_N ||
	      wc_fifos_serverAdapterB_outData_enqData$whas) &&
	     wc_fifos_serverAdapterB_outData_outData$whas ;
  assign WILL_FIRE_portB_response_get = EN_portB_response_get ;

  // action method portAClear
  assign CAN_FIRE_portAClear = 1'd1 ;
  assign WILL_FIRE_portAClear = EN_portAClear ;

  // action method portBClear
  assign CAN_FIRE_portBClear = 1'd1 ;
  assign WILL_FIRE_portBClear = EN_portBClear ;

  // submodule wc_fifos_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd18),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(19'd8192)) wc_fifos_memory(.CLKA(CLK),
					      .CLKB(CLK),
					      .ADDRA(wc_fifos_memory$ADDRA),
					      .ADDRB(wc_fifos_memory$ADDRB),
					      .DIA(wc_fifos_memory$DIA),
					      .DIB(wc_fifos_memory$DIB),
					      .WEA(wc_fifos_memory$WEA),
					      .WEB(wc_fifos_memory$WEB),
					      .ENA(wc_fifos_memory$ENA),
					      .ENB(wc_fifos_memory$ENB),
					      .DOA(wc_fifos_memory$DOA),
					      .DOB(wc_fifos_memory$DOB));

  // submodule wc_fifos_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wc_fifos_serverAdapterA_outDataCore(.RST(RST_N),
								   .CLK(CLK),
								   .D_IN(wc_fifos_serverAdapterA_outDataCore$D_IN),
								   .ENQ(wc_fifos_serverAdapterA_outDataCore$ENQ),
								   .DEQ(wc_fifos_serverAdapterA_outDataCore$DEQ),
								   .CLR(wc_fifos_serverAdapterA_outDataCore$CLR),
								   .D_OUT(wc_fifos_serverAdapterA_outDataCore$D_OUT),
								   .FULL_N(wc_fifos_serverAdapterA_outDataCore$FULL_N),
								   .EMPTY_N(wc_fifos_serverAdapterA_outDataCore$EMPTY_N));

  // submodule wc_fifos_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) wc_fifos_serverAdapterB_outDataCore(.RST(RST_N),
								   .CLK(CLK),
								   .D_IN(wc_fifos_serverAdapterB_outDataCore$D_IN),
								   .ENQ(wc_fifos_serverAdapterB_outDataCore$ENQ),
								   .DEQ(wc_fifos_serverAdapterB_outDataCore$DEQ),
								   .CLR(wc_fifos_serverAdapterB_outDataCore$CLR),
								   .D_OUT(wc_fifos_serverAdapterB_outDataCore$D_OUT),
								   .FULL_N(wc_fifos_serverAdapterB_outDataCore$FULL_N),
								   .EMPTY_N(wc_fifos_serverAdapterB_outDataCore$EMPTY_N));

  // rule RL_wc_fifos_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_wc_fifos_serverAdapterA_stageReadResponseAlways =
	     EN_portA_request_put ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterA_stageReadResponseAlways =
	     EN_portA_request_put ;

  // rule RL_wc_fifos_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_wc_fifos_serverAdapterA_moveToOutFIFO =
	     wc_fifos_serverAdapterA_outDataCore$FULL_N &&
	     wc_fifos_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_wc_fifos_serverAdapterA_moveToOutFIFO ;

  // rule RL_wc_fifos_serverAdapterA_overRun
  assign CAN_FIRE_RL_wc_fifos_serverAdapterA_overRun =
	     wc_fifos_serverAdapterA_s1[1] &&
	     !wc_fifos_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterA_overRun =
	     CAN_FIRE_RL_wc_fifos_serverAdapterA_overRun ;

  // rule RL_wc_fifos_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_setFirstCore =
	     wc_fifos_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_setFirstCore =
	     wc_fifos_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_wc_fifos_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_setFirstEnq =
	     !wc_fifos_serverAdapterA_outDataCore$EMPTY_N &&
	     wc_fifos_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_setFirstEnq ;

  // rule RL_wc_fifos_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_enqOnly =
	     wc_fifos_serverAdapterA_outDataCore$FULL_N &&
	     !EN_portA_response_get &&
	     wc_fifos_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_enqOnly ;

  // rule RL_wc_fifos_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_deqOnly =
	     wc_fifos_serverAdapterA_outDataCore$EMPTY_N &&
	     EN_portA_response_get &&
	     !wc_fifos_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_deqOnly ;

  // rule RL_wc_fifos_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_enqAndDeq =
	     wc_fifos_serverAdapterA_outDataCore$EMPTY_N &&
	     wc_fifos_serverAdapterA_outDataCore$FULL_N &&
	     EN_portA_response_get &&
	     wc_fifos_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_wc_fifos_serverAdapterA_outData_enqAndDeq ;

  // rule RL_wc_fifos_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_wc_fifos_serverAdapterA_cnt_finalAdd =
	     wc_fifos_serverAdapterA_cnt_1$whas || EN_portA_response_get ||
	     EN_portAClear ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_wc_fifos_serverAdapterA_cnt_finalAdd ;

  // rule RL_wc_fifos_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_wc_fifos_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_wc_fifos_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_wc_fifos_serverAdapterB_stageReadResponseAlways =
	     EN_portB_request_put ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterB_stageReadResponseAlways =
	     EN_portB_request_put ;

  // rule RL_wc_fifos_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_wc_fifos_serverAdapterB_moveToOutFIFO =
	     wc_fifos_serverAdapterB_outDataCore$FULL_N &&
	     wc_fifos_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_wc_fifos_serverAdapterB_moveToOutFIFO ;

  // rule RL_wc_fifos_serverAdapterB_overRun
  assign CAN_FIRE_RL_wc_fifos_serverAdapterB_overRun =
	     wc_fifos_serverAdapterB_s1[1] &&
	     !wc_fifos_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterB_overRun =
	     CAN_FIRE_RL_wc_fifos_serverAdapterB_overRun ;

  // rule RL_wc_fifos_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_setFirstCore =
	     wc_fifos_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_setFirstCore =
	     wc_fifos_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_wc_fifos_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_setFirstEnq =
	     !wc_fifos_serverAdapterB_outDataCore$EMPTY_N &&
	     wc_fifos_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_setFirstEnq ;

  // rule RL_wc_fifos_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_enqOnly =
	     wc_fifos_serverAdapterB_outDataCore$FULL_N &&
	     !EN_portB_response_get &&
	     wc_fifos_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_enqOnly ;

  // rule RL_wc_fifos_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_deqOnly =
	     wc_fifos_serverAdapterB_outDataCore$EMPTY_N &&
	     EN_portB_response_get &&
	     !wc_fifos_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_deqOnly ;

  // rule RL_wc_fifos_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_enqAndDeq =
	     wc_fifos_serverAdapterB_outDataCore$EMPTY_N &&
	     wc_fifos_serverAdapterB_outDataCore$FULL_N &&
	     EN_portB_response_get &&
	     wc_fifos_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_wc_fifos_serverAdapterB_outData_enqAndDeq ;

  // rule RL_wc_fifos_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_wc_fifos_serverAdapterB_cnt_finalAdd =
	     wc_fifos_serverAdapterB_cnt_1$whas || EN_portB_response_get ||
	     EN_portBClear ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_wc_fifos_serverAdapterB_cnt_finalAdd ;

  // rule RL_wc_fifos_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_wc_fifos_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wc_fifos_serverAdapterB_s1__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_wc_fifos_serverAdapterA_s1_1$wset_1__VAL_2 =
	     { 1'd1,
	       !portA_request_put_BITS_51_TO_50__q1[1] ||
	       portA_request_put_BITS_51_TO_50__q1[0] } ;
  assign MUX_wc_fifos_serverAdapterB_s1_1$wset_1__VAL_2 =
	     { 1'd1,
	       !portB_request_put_BITS_51_TO_50__q2[1] ||
	       portB_request_put_BITS_51_TO_50__q2[0] } ;

  // inlined wires
  assign wc_fifos_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_wc_fifos_serverAdapterA_moveToOutFIFO &&
	     wc_fifos_serverAdapterA_s1[0] ;
  assign wc_fifos_serverAdapterA_outData_outData$whas =
	     WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_setFirstEnq ||
	     wc_fifos_serverAdapterA_outDataCore$EMPTY_N ;
  assign wc_fifos_serverAdapterA_cnt_1$whas =
	     EN_portA_request_put &&
	     (!portA_request_put_BITS_51_TO_50__q1[1] ||
	      portA_request_put_BITS_51_TO_50__q1[0]) ;
  assign wc_fifos_serverAdapterA_s1_1$wget =
	     EN_portAClear ?
	       2'd0 :
	       MUX_wc_fifos_serverAdapterA_s1_1$wset_1__VAL_2 ;
  assign wc_fifos_serverAdapterA_s1_1$whas =
	     EN_portAClear || EN_portA_request_put ;
  assign wc_fifos_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_wc_fifos_serverAdapterB_moveToOutFIFO &&
	     wc_fifos_serverAdapterB_s1[0] ;
  assign wc_fifos_serverAdapterB_outData_outData$whas =
	     WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_setFirstEnq ||
	     wc_fifos_serverAdapterB_outDataCore$EMPTY_N ;
  assign wc_fifos_serverAdapterB_cnt_1$whas =
	     EN_portB_request_put &&
	     (!portB_request_put_BITS_51_TO_50__q2[1] ||
	      portB_request_put_BITS_51_TO_50__q2[0]) ;
  assign wc_fifos_serverAdapterB_s1_1$wget =
	     EN_portBClear ?
	       2'd0 :
	       MUX_wc_fifos_serverAdapterB_s1_1$wset_1__VAL_2 ;
  assign wc_fifos_serverAdapterB_s1_1$whas =
	     EN_portBClear || EN_portB_request_put ;

  // register wc_fifos_serverAdapterA_cnt
  assign wc_fifos_serverAdapterA_cnt$D_IN =
	     EN_portAClear ?
	       3'd0 :
	       wc_fifos_serverAdapterA_cnt_6_PLUS_IF_wc_fifos_ETC___d32 ;
  assign wc_fifos_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_wc_fifos_serverAdapterA_cnt_finalAdd ;

  // register wc_fifos_serverAdapterA_s1
  assign wc_fifos_serverAdapterA_s1$D_IN =
	     { wc_fifos_serverAdapterA_s1_1$whas &&
	       wc_fifos_serverAdapterA_s1_1$wget[1],
	       wc_fifos_serverAdapterA_s1_1$wget[0] } ;
  assign wc_fifos_serverAdapterA_s1$EN = 1'd1 ;

  // register wc_fifos_serverAdapterB_cnt
  assign wc_fifos_serverAdapterB_cnt$D_IN =
	     EN_portBClear ?
	       3'd0 :
	       wc_fifos_serverAdapterB_cnt_3_PLUS_IF_wc_fifos_ETC___d89 ;
  assign wc_fifos_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_wc_fifos_serverAdapterB_cnt_finalAdd ;

  // register wc_fifos_serverAdapterB_s1
  assign wc_fifos_serverAdapterB_s1$D_IN =
	     { wc_fifos_serverAdapterB_s1_1$whas &&
	       wc_fifos_serverAdapterB_s1_1$wget[1],
	       wc_fifos_serverAdapterB_s1_1$wget[0] } ;
  assign wc_fifos_serverAdapterB_s1$EN = 1'd1 ;

  // submodule wc_fifos_memory
  assign wc_fifos_memory$ADDRA = portA_request_put[49:32] ;
  assign wc_fifos_memory$ADDRB = portB_request_put[49:32] ;
  assign wc_fifos_memory$DIA = portA_request_put[31:0] ;
  assign wc_fifos_memory$DIB = portB_request_put[31:0] ;
  assign wc_fifos_memory$WEA = portA_request_put[51] ;
  assign wc_fifos_memory$WEB = portB_request_put[51] ;
  assign wc_fifos_memory$ENA = EN_portA_request_put ;
  assign wc_fifos_memory$ENB = EN_portB_request_put ;

  // submodule wc_fifos_serverAdapterA_outDataCore
  assign wc_fifos_serverAdapterA_outDataCore$D_IN = wc_fifos_memory$DOA ;
  assign wc_fifos_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_enqOnly ;
  assign wc_fifos_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_wc_fifos_serverAdapterA_outData_deqOnly ;
  assign wc_fifos_serverAdapterA_outDataCore$CLR = EN_portAClear ;

  // submodule wc_fifos_serverAdapterB_outDataCore
  assign wc_fifos_serverAdapterB_outDataCore$D_IN = wc_fifos_memory$DOB ;
  assign wc_fifos_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_enqOnly ;
  assign wc_fifos_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_wc_fifos_serverAdapterB_outData_deqOnly ;
  assign wc_fifos_serverAdapterB_outDataCore$CLR = EN_portBClear ;

  // remaining internal signals
  assign portA_request_put_BITS_51_TO_50__q1 = portA_request_put[51:50] ;
  assign portB_request_put_BITS_51_TO_50__q2 = portB_request_put[51:50] ;
  assign wc_fifos_serverAdapterA_cnt_6_PLUS_IF_wc_fifos_ETC___d32 =
	     wc_fifos_serverAdapterA_cnt +
	     (wc_fifos_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (EN_portA_response_get ? 3'd7 : 3'd0) ;
  assign wc_fifos_serverAdapterB_cnt_3_PLUS_IF_wc_fifos_ETC___d89 =
	     wc_fifos_serverAdapterB_cnt +
	     (wc_fifos_serverAdapterB_cnt_1$whas ? 3'd1 : 3'd0) +
	     (EN_portB_response_get ? 3'd7 : 3'd0) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        wc_fifos_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wc_fifos_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wc_fifos_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	wc_fifos_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (wc_fifos_serverAdapterA_cnt$EN)
	  wc_fifos_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      wc_fifos_serverAdapterA_cnt$D_IN;
	if (wc_fifos_serverAdapterA_s1$EN)
	  wc_fifos_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      wc_fifos_serverAdapterA_s1$D_IN;
	if (wc_fifos_serverAdapterB_cnt$EN)
	  wc_fifos_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      wc_fifos_serverAdapterB_cnt$D_IN;
	if (wc_fifos_serverAdapterB_s1$EN)
	  wc_fifos_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      wc_fifos_serverAdapterB_s1$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    wc_fifos_serverAdapterA_cnt = 3'h2;
    wc_fifos_serverAdapterA_s1 = 2'h2;
    wc_fifos_serverAdapterB_cnt = 3'h2;
    wc_fifos_serverAdapterB_s1 = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wc_fifos_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_wc_fifos_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkWCFIFO

